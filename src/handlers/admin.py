import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from models.user import User, UserRole
from filters.has_role import HasRoleFilter
from keyboards.inline import get_admin_main_keyboard
from keyboards.inline import get_cancel_keyboard
from states.admin_states import AdminMenuSG
from utils.misc import safe_message_delete

logger = logging.getLogger(__name__)
router = Router()


# -----------------------------
# 1. /admin ‚Äì –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
# -----------------------------
@router.message(
    Command("admin"), HasRoleFilter(roles=[UserRole.ADMIN]), StateFilter("*")
)
async def admin_menu(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ (–∫–Ω–æ–ø–∫–∏).
    –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MAIN.
    """
    await state.set_state(AdminMenuSG.MAIN)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é!", reply_markup=get_admin_main_keyboard()
    )


# --------------------------------
# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# --------------------------------
@router.callback_query(
    lambda c: c.data == "add_admin",
    HasRoleFilter(roles=[UserRole.ADMIN]),
    StateFilter(AdminMenuSG.MAIN),
)
async def on_add_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
    –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Telegram ID. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª.
    """
    await state.set_state(AdminMenuSG.ADD_ADMIN)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç.",
        reply_markup=get_cancel_keyboard(),
    )
    await callback.answer()


@router.callback_query(
    lambda c: c.data == "stats",
    HasRoleFilter(roles=[UserRole.ADMIN]),
    StateFilter(AdminMenuSG.MAIN),
)
async def on_stats_callback(callback: types.CallbackQuery, session: AsyncSession):
    """
    –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É".
    """
    admin_count = await session.scalar(
        select(func.count(User.id)).where(User.role == UserRole.ADMIN)
    )
    user_count = await session.scalar(
        select(func.count(User.id)).where(User.role == UserRole.USER)
    )
    banned_count = await session.scalar(
        select(func.count(User.id)).where(User.banned == True)
    )

    msg = (
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (USER): {user_count}\n"
        f"üîß –ê–¥–º–∏–Ω—ã (ADMIN): {admin_count}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω—ã: {banned_count}"
    )
    await callback.message.answer(msg)
    await callback.answer()


@router.callback_query(
    lambda c: c.data == "ban_user",
    HasRoleFilter(roles=[UserRole.ADMIN]),
    StateFilter(AdminMenuSG.MAIN),
)
async def on_ban_user_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –ö–Ω–æ–ø–∫–∞ "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".
    –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Telegram ID. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª.
    """
    await state.set_state(AdminMenuSG.BAN_USER)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç.",
        reply_markup=get_cancel_keyboard(),
    )
    await callback.answer()


@router.callback_query(
    lambda c: c.data == "broadcast",
    HasRoleFilter(roles=[UserRole.ADMIN]),
    StateFilter(AdminMenuSG.MAIN),
)
async def on_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É".
    –ü—Ä–æ—Å–∏–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç). –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª.
    """
    await state.set_state(AdminMenuSG.BROADCAST)
    await callback.message.answer(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç), —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_cancel_keyboard(),
    )
    await callback.answer()


# ------------------------------
# –ö–ù–û–ü–ö–ê "–û–¢–ú–ï–ù–ê" (cancel_admin_action)
# ------------------------------


@router.callback_query(
    lambda c: c.data == "cancel_admin_action",
    HasRoleFilter(roles=[UserRole.ADMIN]),
    StateFilter(AdminMenuSG.ADD_ADMIN, AdminMenuSG.BAN_USER, AdminMenuSG.BROADCAST),
)
async def on_cancel_admin_action(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–º–µ–Ω–∞" –≤–æ –≤—Ä–µ–º—è –ª—é–±–æ–≥–æ –∏–∑ —Ç—Ä—ë—Ö "—Ä–µ–∂–∏–º–æ–≤".
    –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è),
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ AdminMenuSG.MAIN,
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–∞–¥–æ.
    """
    deleted = await safe_message_delete(callback.message)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    # –ù–æ –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –ø—Ä–∏–¥—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    if not deleted:
        await callback.message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_main_keyboard(),
        )
    else:
        await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.set_state(AdminMenuSG.MAIN)
    await callback.answer()


# -----------------------------------------------------
# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ "—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
# -----------------------------------------------------


# --- (a) ADD_ADMIN ---
@router.message(
    HasRoleFilter(roles=[UserRole.ADMIN]), StateFilter(AdminMenuSG.ADD_ADMIN)
)
async def handle_add_admin(
    message: types.Message, session: AsyncSession, state: FSMContext
):
    text = message.text.strip()
    try:
        new_admin_id = int(text)
    except ValueError:
        await message.answer(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )
        return

    user_to_admin = await session.scalar(
        select(User).where(User.telegram_id == new_admin_id)
    )
    if not user_to_admin:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        return

    user_to_admin.role = UserRole.ADMIN
    await session.commit()
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_admin.telegram_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!")

    await state.set_state(AdminMenuSG.MAIN)


# --- (b) BAN_USER ---
@router.message(
    HasRoleFilter(roles=[UserRole.ADMIN]), StateFilter(AdminMenuSG.BAN_USER)
)
async def handle_ban_user(
    message: types.Message, session: AsyncSession, state: FSMContext
):
    text = message.text.strip()
    try:
        ban_user_id = int(text)
    except ValueError:
        await message.answer(
            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )
        return

    user_to_ban = await session.scalar(
        select(User).where(User.telegram_id == ban_user_id)
    )
    if not user_to_ban:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        return

    user_to_ban.banned = True
    await session.commit()
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban.telegram_id} –∑–∞–±–∞–Ω–µ–Ω!")

    await state.set_state(AdminMenuSG.MAIN)


# --- (c) BROADCAST ---
@router.message(
    HasRoleFilter(roles=[UserRole.ADMIN]), StateFilter(AdminMenuSG.BROADCAST)
)
async def handle_broadcast(
    message: types.Message, session: AsyncSession, state: FSMContext
):
    users = await session.scalars(select(User).where(User.banned == False))
    users_list = users.all()

    if message.forward_from or message.forward_from_chat:
        for user in users_list:
            try:
                await message.bot.copy_message(
                    chat_id=user.telegram_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id,
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å {user.telegram_id}: {e}")
    else:
        text_to_send = message.text
        for user in users_list:
            try:
                await message.bot.send_message(
                    chat_id=user.telegram_id, text=text_to_send
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user.telegram_id}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏.")
    await state.set_state(AdminMenuSG.MAIN)
